*. 배열(array)

1. 같은 dataType의 여러개의 값을 연속적으로 저장
   배열은 생성시 반드시 크기를 지정
   배열은 크기 변경이 불가능
   배열의 크기는 length 사용
   
2-1) 기본 dataType 배열

	 a. 선언 (접근제어자 dataType[] 배열명;) (접근제어자 dataType 배열명[];) 
	 	ex) public int[] x;
	 		public int x[];
	 		char c[];
	 		boolean[] b;
	 
	 b. 생성 (배열명 = new dataType[길이(크기)];)
	 	ex) x = new int[3];
	 		c = new char[5];
	 		b = new boolean[2];
	 
	 *. a, b 동시에 가능 ( ex) public int x[] = new int[3]; )
	 
	 c. 사용 ( 배열명[index] = 값; )
	 	ex) x[0] = 10;  x[1] = 20;  x[2] = 30;  <->  for (int i = 0 ; i < x.length ; i++) { x[i] = (i + 1) * 10; }
	 		c[0] = 'a'; c[1] = 'b';
	 
	 *. a, b, c를 동시에 가능 ( ex) public int[] x = {10, 20, 30}; )
	    단, 직접적인 값 대입만 가능, 메소드 호출을 통한 값 대입 불가
	 
	 *. String s[] = {"java", "hello"};
	 

2-2) referenceType(Class) 배열

	 a. 선언 (접근제어자 referenceType[] 배열명;) (접근제어자 referenceType 배열명[];) 
	 	ex) public String[] str;
	 		public String str[];
	 		Car car[];
	 
	 b. 생성 (배열명 = new dataType[길이(크기)];)
	 	ex) str = new String[3];
	 		car = new Car[2];
	 
	 *. a, b 동시에 가능 ( ex) public String str[] = new String[3]; )
	 
	 c. 사용 ( 배열명[index] = reference; [new referenceType();] )
	 	ex) str[0] = "Hello";
	 		str[1] = "Java";
	 		str[1] = new String("Hello");
	 		
	 		car[0] = new Car();
	 		
	*. a, b, c를 동시에 가능 ( ex) public Car[] x = {new Car(), new Car(), new Car()}; )
	 	